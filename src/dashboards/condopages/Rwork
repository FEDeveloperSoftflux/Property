import React, { useState } from "react";
import { 
  Home, FolderOpen, Users, MessageSquare, FileText, Settings,
  Plus, Eye, AlertTriangle, Calendar, User, Bell, Search,
  ChevronDown, Download, QrCode, Edit, Trash2, Check
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import Sidebar from "../Sidebar";
import logo from "../../assets/Dashlogo.png";
import AssetManagementModal from "../condopages/AddNewAssetModal";
import { PiSidebarSimpleThin } from "react-icons/pi";

export default function AssetsManagement() {
  const [selectedAssets, setSelectedAssets] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [assetsData, setAssetsData] = useState([ // ✅ Now state
    {
      id: "A001",
      createdAt: "Jan 15, 2024",
      name: "Main HVAC System",
      type: "HVAC",
      category: "Mechanical",
      location: "Basement, Room B12",
      status: "Good"
    },
    {
      id: "A002",
      createdAt: "Jan 15, 2024",
      name: "Elevator #1",
      type: "Elevator",
      category: "Transportation",
      location: "Main Lobby",
      status: "Needs Attention"
    },
    {
      id: "A003",
      createdAt: "Jan 15, 2024",
      name: "Emergency Generator",
      type: "Electrical",
      category: "Power",
      location: "Basement, Room B10",
      status: "Fair"
    }
  ]);

  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case 'good': return 'bg-green-100 text-green-600 border-green-200';
      case 'fair': return 'bg-yellow-100 text-yellow-600 border-yellow-200';
      case 'needs attention': return 'bg-red-100 text-red-600 border-red-200';
      default: return 'bg-gray-100 text-gray-600 border-gray-200';
    }
  };

  const handleAddAsset = (newAsset) => {
    const newId = `A${String(assetsData.length + 1).padStart(3, "0")}`;
    const createdAt = new Date().toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric"
    });

    const assetToAdd = {
      id: newId,
      createdAt,
      name: newAsset.assetName,
      type: newAsset.assetType,
      category: newAsset.assetType === "HVAC" ? "Mechanical" : 
                newAsset.assetType === "Elevator" ? "Transportation" : 
                newAsset.assetType === "Electrical" ? "Power" : "General",
      location: newAsset.location,
      status: newAsset.condition
    };

    setAssetsData(prev => [assetToAdd, ...prev]); // ✅ Add on top
    setIsModalOpen(false);
  };

  const toggleAssetSelection = (assetId) => {
    setSelectedAssets(prev => 
      prev.includes(assetId) 
        ? prev.filter(id => id !== assetId)
        : [...prev, assetId]
    );
  };

  const toggleAllAssets = () => {
    if (selectedAssets.length === assetsData.length) {
      setSelectedAssets([]);
    } else {
      setSelectedAssets(assetsData.map(asset => asset.id));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex relative">
      {/* Sidebar */}
      <Sidebar className="fixed" />

      {/* Main Content */}
      <div className="flex-1 ml-60 bg-gray-50">
        
        {/* Header */}
        <div className="bg-white border-b border-gray-100 px-8 py-4 flex justify-between items-center">
          <h1 className="text-3xl font-bold text-gray-900">Assets Management</h1>
          <img src={logo} className="w-10 h-10 mr-6" />
        </div>

        <div className="p-8">
          {/* Section Header */}
          <div className="flex justify-between items-center mb-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">All Assets</h2>
              <p className="text-sm text-gray-500">You can manage and update your assets</p>
            </div>
            <button 
              onClick={() => setIsModalOpen(true)}  
              className="flex items-center px-6 py-2 text-sm font-semibold text-white bg-custom-blue rounded-lg hover:bg-blue-900">
              <Plus className="w-4 h-4 mr-2" />
              Add New Asset
            </button>
          </div>

          {/* ✅ Modal Mount */}
          {isModalOpen && (
            <AssetManagementModal 
              onClose={() => setIsModalOpen(false)} 
              onSubmit={handleAddAsset} 
            />
          )}

  <div className="grid grid-cols-4 gap-6 mb-8">
            {/* Total Assets */}
            <div className="bg-white p-6 rounded-3xl border border-gray-200 hover:shadow-lg hover:bg-custom-blue group">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-semibold text-gray-700 mb-4 group-hover:text-white">Total Assets</p>
                  <p className="text-3xl font-bold text-gray-900 group-hover:text-white">10</p>
                </div>
                <div className="w-12 h-12 bg-blue-50 rounded-2xl flex items-center justify-center border border-gray-100 group-hover:bg-custom-blue">
                  <FolderOpen className="w-6 h-6 text-custom-blue group-hover:text-white" />
                </div>
              </div>
            </div>

            {/* Needs Attention */}
            <div className="bg-white border border-gray-200 p-6 rounded-3xl hover:shadow-lg hover:bg-custom-blue group ">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-semibold text-gray-700 mb-4 group-hover:text-white">Needs Attention</p>
                  <p className="text-3xl font-bold text-black group-hover:text-white">5</p>
                </div>
                <div className="w-12 h-12 bg-blue-50 rounded-2xl flex items-center justify-center group-hover:bg-custom-blue border border-e-red-100">
                  <AlertTriangle className="w-6 h-6 text-custom-blue group-hover:text-white group-hover:text-custom-bl " />
                </div>
              </div>
            </div>

            {/* Good Condition */}
            <div className="bg-white p-6 rounded-3xl border border-gray-200 hover:shadow-lg hover:bg-custom-blue group">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-semibold text-gray-700 mb-4 group-hover:text-white">Good Condition</p>
                  <p className="text-3xl font-bold text-gray-900 group-hover:text-white">4</p>
                </div>
                <div className="w-12 h-12 bg-blue-50 rounded-2xl flex items-center justify-center border border-gray-100 group-hover:bg-custom-blue group-hover:border-">
            <Check className="bg-custom-blue text-white rounded-full group-hover:bg-white group-hover:text-custom-blue"/> 
                </div>
              </div>
            </div>

            {/* Fair Condition */}
            <div className="bg-white p-6 rounded-3xl border border-gray-200 hover:shadow-lg hover:bg-custom-blue group">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm font-semibold text-gray-700 mb-4 group-hover:text-white">Fair Condition</p>
                  <p className="text-3xl font-bold text-gray-900 group-hover:text-white">1</p>
                </div>
                <div className="w-12 h-12 bg-blue-50 rounded-2xl flex items-center justify-center border border-gray-100  group-hover:bg-custom-blue">
           <div className="rounded-full bg-custom-blue group-hover:bg-white w-7"> <span className="text-white text-xl flex justify-center group-hover:text-custom-blue">!</span> </div>
                </div>
              </div>
            </div>
          </div>

          {/* Filters */}
          <div className="flex space-x-4 mb-6">
            <div className="flex-1 max-w-xs relative">
              <Search className="w-4 h-4 absolute left-3 top-3 text-gray-400" />
              <input
                type="text"
                placeholder="Search by asset name or ID..."
                className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-2xl text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <div className="relative">
              <select className="appearance-none bg-gray-50 border border-gray-200 rounded-2xl px-4 py-3 pr-10 text-sm text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option>All Types</option>
                <option>HVAC</option>
                <option>Elevator</option>
                <option>Electrical</option>
              </select>
              <ChevronDown className="w-4 h-4 absolute right-3 top-3.5 text-gray-400 pointer-events-none" />
            </div>

            <div className="relative">
              <select className="appearance-none bg-gray-50 border border-gray-200 rounded-2xl px-4 py-3 pr-10 text-sm text-gray-600 focus:outline-none focus:ring-2 focus:ring-custom-blue">
                <option>All Statuses</option>
                <option>Good</option>
                <option>Fair</option>
                <option>Needs Attention</option>
              </select>
              <ChevronDown className="w-4 h-4 absolute right-3 top-3.5 text-gray-400 pointer-events-none" />
            </div>

            <div className="relative">
              <input
                type="date"
                className="bg-gray-50 border border-gray-200 rounded-2xl px-4 py-3 text-sm text-gray-600 focus:outline-none focus:ring-2 focus:ring-custom-blue"
              />
            </div>

            <button className="flex items-center px-4 py-3 bg-gray-50 border border-gray-200 rounded-2xl text-sm text-gray-600 hover:bg-gray-100">
              <QrCode className="w-4 h-4 mr-2" />
              Download QR Code
            </button>
          </div>
          {/* Assets Table */}
          <div className="bg-white rounded-3xl border border-gray-100 overflow-hidden">
            {/* Table Header */}
            <div className="bg-blue-50/50 px-6 py-4 border-b border-gray-100">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={selectedAssets.length === assetsData.length}
                  onChange={toggleAllAssets}
                  className="w-4 h-4 mr-6"
                />
                <div className="grid grid-cols-6 gap-8 flex-1 text-xs font-medium text-gray-500 uppercase">
                  <div>ID / Created At</div>
                  <div>Asset Name</div>
                  <div>Type</div>
                  <div>Category</div>
                  <div>Location</div>
                  <div>Status</div>
                </div>
                <div className="w-20 text-xs font-medium text-gray-500 uppercase">Actions</div>
              </div>
            </div>

            {/* Table Body */}
            {assetsData.map(asset => (
              <div key={asset.id} className="px-6 py-4 border-b border-gray-100 flex items-center">
                <input
                  type="checkbox"
                  checked={selectedAssets.includes(asset.id)}
                  onChange={() => toggleAssetSelection(asset.id)}
                  className="w-4 h-4 mr-6"
                />
                <div className="grid grid-cols-6 gap-8 flex-1 items-center">
                  <div>
                    <div className="text-sm font-medium">{asset.id}</div>
                    <div className="text-xs text-gray-500">{asset.createdAt}</div>
                  </div>
                  <div>{asset.name}</div>
                  <div>{asset.type}</div>
                  <div>{asset.category}</div>
                  <div>{asset.location}</div>
                  <div>
                    <span className={`px-3 py-1 rounded-xl text-xs font-medium border ${getStatusColor(asset.status)}`}>
                      {asset.status}
                    </span>
                  </div>
                </div>
                <div className="flex space-x-2 w-20">
                  <Eye className="w-4 h-4 text-gray-400 hover:text-blue-600 cursor-pointer" />
                  <Edit className="w-4 h-4 text-gray-400 hover:text-blue-600 cursor-pointer" />
                  <Trash2 className="w-4 h-4 text-gray-400 hover:text-red-600 cursor-pointer" />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}




        .......................................side bar.........................................
 <div className="w-64 bg-white border-r border-gray-200 fixed h-full">
        <div className="p-6">
          <div className="flex items-center gap-2 mb-8">
            <div className="w-8 h-8 bg-blue-600 rounded flex items-center justify-center">
              <span className="text-white font-bold text-sm">P</span>
            </div>
            <span className="font-semibold text-gray-800">Project Hub</span>
          </div>
          
          <nav className="space-y-2">
            {menuItems.map((item) => {
              const IconComponent = item.icon;
              const isActive = activeMenuItem === item.id;
              
              return (
                <button
                  key={item.id}
                  onClick={() => setActiveMenuItem(item.id)}
                  className={`w-full flex items-center gap-3 px-3 py-2 whitespace-nowrap rounded-lg transition-all duration-200 ${
                    isActive
                      ? 'bg-custom-blue text-white shadow-md transform scale-105'
                      : 'text-gray-600 hover:bg-blue-50 hover:text-custom-blue hover:scale-102 hover:shadow-sm'
                  }`}
                >
                  <IconComponent className={`w-5 h-5 transition-colors duration-200 ${
                    isActive ? 'text-white' : 'text-gray-500'
                  }`} />
                  <span className="font-medium">{item.label}</span>
                </button>
              );
            })}
          </nav>
        </div>
        
        <div className="absolute bottom-4 left-4 right-4">
          <a href="#" className="flex items-center gap-3 px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">
            <Settings className="w-5 h-5" />
            <span>Setting</span>
          </a>
        </div>
      </div>
............................................
import React, { useState } from 'react';
import { Menu, X } from "lucide-react"; // nice icons
import logo from "./assets/loginlogo.png";
import navimg from "./assets/bluecurve.png";
import { useNavigate } from "react-router-dom"; 

function Head() {
  const [isOpen, setIsOpen] = useState(false);
  const navigate = useNavigate();

  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const toggleMenu = () => setIsOpen(!isOpen);

  return (
    <header className="relative z-20 flex justify-between px-6 md:px-12 py-0">
          <div className="flex flex-col items-center">
            <img src={logo} alt="Logo" className="w-[140px] h-[70px] object-contain" />
            <span className="font-bold text-white text-lg whitespace-nowrap ">Property Connect</span>
          </div>
          <nav className= "hidden lg:text-sm lg:flex w-[900px] h-[60px] bg-cover xl:gap-10 xl:text-sm items-center justify-center sm:text-xs sm:font-semibold md:font-thin md:gap-6 lg:gap-3 sm:gap-5 md:text-sm lg:pr-4 lg:pl-4     text-[clamp(12px,1.0vw,18px)] font-medium tracking-wide  " 
               style={{ backgroundImage: `url(${navimg})`, backgroundSize: '100% 100%' }}>
            <button className="hover:font-bold text-black lg">Home</button>
            <button  onClick={() => navigate("/#condoowner")} className="hover:font-bold text-black whitespace-nowrap">Condos & Home Owners</button>
            <button   onClick={() => navigate("/#organization")} className="hover:font-bold  text-black">Organizations</button>
            <button onClick={() => navigate("/Pricing")} className="hover:font-bold  text-black">Pricing</button>
            <button onClick={()=> navigate("/contactus")} className="hover:font-bold  text-black whitespace-nowrap">Customer Support</button>
            <button  onClick={()=> navigate("/about")} className="hover:font-bold  text-black">About</button>
          </nav>
          
 <div className="flex items-center space-x-3">
  {/* Login Button */}
  <button className="border border-white bg-transparent text-white px-4 hover:font-bold rounded-full text-sm h-10 hover:bg-white hover:text-black transition-all" onClick={() => navigate("/Login")}>
    Login
  </button>

  {/* Sign Up Button */}
  <span className="relative flex items-center rounded-full border border-white overflow-hidden group h-10 ">
    {/* Text section */}
    <button className="px-6 text-white font-medium text-sm transition-all duration-300 group-hover:text-black hover:bg-white border border-white rounded-full h-10 flex justify-center items-center whitespace-nowrap"  onClick={()=> navigate("/signin")} >
      Sign up
    </button>

    {/* Arrow section */}
    <span className="w-0 group-hover:w-12 flex items-center justify-center transition-all duration-300 ease-in-out">
      <svg
        className="w-5 h-5 text-black"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M17 8l4 4m0 0l-4 4m4-4H3"
        />
      </svg>
    </span>
  </span>
          <button
            className="lg:hidden  text-white p-2"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            {mobileMenuOpen ? <X size={28} /> : <Menu size={28} />}
          </button>      
</div>

             {mobileMenuOpen && (
          <div className=" lg:hidden 2xl:hidden absolute top-20 left-0 w-full backdrop-blur-sm text-white  shadow-lg z-30 flex flex-col items-start px-6 py-7 space-y-4">
            <a href="#" className="hover:text-black hover:font-semibold">Home</a>
            <a href="#" className="hover:text-black hover:font-semibold">Condos & Home Owners</a>
            <a href="#" className="hover:text-black hover:font-semibold">Organizations</a>
            <a href="#" className="hover:text-black hover:font-semibold">Pricing</a>
            <a href="#" className="hover:text-black hover:font-semibold">Customer Support</a>
            <a href="#" className="hover:text-black hover:font-semibold">About</a>
            <hr className="w-full border-gray-200" />
          </div>
        )}
        </header>
  );
}

export default Head;
...................
import React, { useState } from 'react';
import { Menu, X } from "lucide-react"; // nice icons
import logo from "./assets/loginlogo.png";
import navimg from "./assets/bluecurve.png";
import { useNavigate } from "react-router-dom"; 

function Head() {
  const [isOpen, setIsOpen] = useState(false);
  const navigate = useNavigate();

  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const toggleMenu = () => setIsOpen(!isOpen);

  return (
    <header className="relative z-20 flex justify-between px-6 md:px-12 py-0">
          <div className="flex flex-col items-center">
            <img src={logo} alt="Logo" className="w-[140px] h-[70px] object-contain" />
            <span className="font-bold text-white text-lg whitespace-nowrap ">Property Connect</span>
          </div>
          <nav className= "hidden lg:text-sm lg:flex w-[900px] h-[60px] bg-cover xl:gap-10 xl:text-sm items-center justify-center sm:text-xs sm:font-semibold md:font-thin md:gap-6 lg:gap-3 sm:gap-5 md:text-sm lg:pr-4 lg:pl-4     text-[clamp(12px,1.0vw,18px)] font-medium tracking-wide  " 
               style={{ backgroundImage: `url(${navimg})`, backgroundSize: '100% 100%' }}>
            <button className="hover:font-bold text-black lg">Home</button>
            <button  onClick={() => navigate("/#condoowner")} className="hover:font-bold text-black whitespace-nowrap">Condos & Home Owners</button>
            <button   onClick={() => navigate("/#organization")} className="hover:font-bold  text-black">Organizations</button>
            <button onClick={() => navigate("/Pricing")} className="hover:font-bold  text-black">Pricing</button>
            <button onClick={()=> navigate("/contactus")} className="hover:font-bold  text-black whitespace-nowrap">Customer Support</button>
            <button  onClick={()=> navigate("/about")} className="hover:font-bold  text-black">About</button>
          </nav>
          
 <div className="flex items-center space-x-3">
  {/* Login Button */}
  <button className="border border-white bg-transparent text-white px-4 hover:font-bold rounded-full text-sm h-10 hover:bg-white hover:text-black transition-all" onClick={() => navigate("/Login")}>
    Login
  </button>

  {/* Sign Up Button */}
  <span className="relative flex items-center rounded-full border border-white overflow-hidden group h-10 ">
    {/* Text section */}
    <button className="px-6 text-white font-medium text-sm transition-all duration-300 group-hover:text-black hover:bg-white border border-white rounded-full h-10 flex justify-center items-center whitespace-nowrap"  onClick={()=> navigate("/signin")} >
      Sign up
    </button>

    {/* Arrow section */}
    <span className="w-0 group-hover:w-12 flex items-center justify-center transition-all duration-300 ease-in-out">
      <svg
        className="w-5 h-5 text-black"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M17 8l4 4m0 0l-4 4m4-4H3"
        />
      </svg>
    </span>
  </span>
          <button
            className="lg:hidden  text-white p-2"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            {mobileMenuOpen ? <X size={28} /> : <Menu size={28} />}
          </button>      
</div>

             {mobileMenuOpen && (
          <div className=" lg:hidden 2xl:hidden absolute top-20 left-0 w-full backdrop-blur-sm text-white  shadow-lg z-30 flex flex-col items-start px-6 py-7 space-y-4">
            <a href="#" className="hover:text-black hover:font-semibold">Home</a>
            <a href="#" className="hover:text-black hover:font-semibold">Condos & Home Owners</a>
            <a href="#" className="hover:text-black hover:font-semibold">Organizations</a>
            <a href="#" className="hover:text-black hover:font-semibold">Pricing</a>
            <a href="#" className="hover:text-black hover:font-semibold">Customer Support</a>
            <a href="#" className="hover:text-black hover:font-semibold">About</a>
            <hr className="w-full border-gray-200" />
          </div>
        )}
        </header>
  );
}

export default Head;
.....................................................................................................................................
import React, { useState } from 'react';
import {
  Home,
  FolderOpen,
  Users,
  MessageSquare,
  FileText,
  Settings,
  Bell,
  Search,
  Filter,
  Eye,
  Edit,
  Trash2,
  Archive,
  Clock,
  AlertTriangle,
  CheckCircle,
  X,
  ChevronDown,
  Calendar
} from 'lucide-react';
import Sidebar from '../Sidebar';

export default function ProjectManagementDashboard() {
  const [activeFilter, setActiveFilter] = useState('all');
  const [activeMenuItem, setActiveMenuItem] = useState('projects');
  const [isExpanded, setIsExpanded] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  
  // Filter states
  const [filters, setFilters] = useState({
    company: '',
    vendor: '',
    priority: '',
    status: '',
    startDate: '',
    endDate: ''
  });

  const projects = [
    {
      id: 'PRJ-001',
      title: 'HVAC System Maintenance',
      type: 'Maintenance',
      company: 'Tower A',
      vendor: 'Cool Air Services',
      priority: 'High',
      status: 'Complete',
      timeline: 'Jun 01, 2024\nJan 15, 2025',
      cost: '$12500',
      startDate: '2024-06-01',
      endDate: '2025-01-15'
    },
    {
      id: 'PRJ-002',
      title: 'Elevator Repair',
      type: 'Repair',
      company: 'Tower A',
      vendor: 'Lift Solutions Inc.',
      priority: 'Medium',
      status: 'On Going',
      timeline: 'Jun 01, 2024\nJan 15, 2025',
      cost: '$8700',
      startDate: '2024-06-01',
      endDate: '2025-01-15'
    },
    {
      id: 'PRJ-003',
      title: 'Lobby Renovation',
      type: 'Upgrade',
      company: 'Tower B',
      vendor: 'Modern Interiors',
      priority: 'Urgent',
      status: 'Due Date',
      timeline: 'Jun 01, 2024\nJan 15, 2025',
      cost: '$6700',
      startDate: '2024-06-01',
      endDate: '2025-01-15'
    },
    {
      id: 'PRJ-004',
      title: 'Security System Upgrade',
      type: 'Replacement',
      company: 'Tower C',
      vendor: 'SecureTech',
      priority: 'High',
      status: 'In Progress',
      timeline: 'Jun 01, 2024\nJan 15, 2025',
      cost: '$45000',
      startDate: '2024-06-01',
      endDate: '2025-01-15'
    },
    {
      id: 'PRJ-005',
      title: 'Plumbing System Overhaul',
      type: 'Maintenance',
      company: 'Tower B',
      vendor: 'Aqua Fix Solutions',
      priority: 'Medium',
      status: 'Complete',
      timeline: 'May 15, 2024\nDec 20, 2024',
      cost: '$18000',
      startDate: '2024-05-15',
      endDate: '2024-12-20'
    },
    {
      id: 'PRJ-006',
      title: 'Fire Safety Inspection',
      type: 'Inspection',
      company: 'Tower A',
      vendor: 'SafeGuard Systems',
      priority: 'Urgent',
      status: 'On Going',
      timeline: 'Jul 10, 2024\nFeb 28, 2025',
      cost: '$3200',
      startDate: '2024-07-10',
      endDate: '2025-02-28'
    }
  ];

  // Get unique values for filter dropdowns
  const getUniqueValues = (key) => {
    return [...new Set(projects.map(project => project[key]))];
  };

  // Filter projects based on search and filters
  const filteredProjects = projects.filter(project => {
    // Search filter
    const matchesSearch = project.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         project.vendor.toLowerCase().includes(searchTerm.toLowerCase());

    // Company filter
    const matchesCompany = !filters.company || project.company === filters.company;
    
    // Vendor filter
    const matchesVendor = !filters.vendor || project.vendor === filters.vendor;
    
    // Priority filter
    const matchesPriority = !filters.priority || project.priority === filters.priority;
    
    // Status filter
    const matchesStatus = !filters.status || project.status === filters.status;

    return matchesSearch && matchesCompany && matchesVendor && matchesPriority && matchesStatus;
  });

  // Handle filter changes
  const handleFilterChange = (filterType, value) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value
    }));
  };

  // Clear all filters
  const clearAllFilters = () => {
    setFilters({
      company: '',
      vendor: '',
      priority: '',
      status: '',
      startDate: '',
      endDate: ''
    });
    setSearchTerm('');
  };

  // Count active filters
  const activeFiltersCount = Object.values(filters).filter(Boolean).length + (searchTerm ? 1 : 0);

  const getStatusBadge = (status) => {
    const statusConfig = {
      'Complete': 'bg-green-100 text-green-800',
      'On Going': 'bg-blue-100 text-blue-800',
      'Due Date': 'bg-red-100 text-red-800',
      'In Progress': 'bg-yellow-100 text-yellow-800'
    };
    return statusConfig[status] || 'bg-gray-100 text-gray-800';
  };

  const getPriorityBadge = (priority) => {
    const priorityConfig = {
      'High': 'bg-orange-100 text-orange-800',
      'Medium': 'bg-blue-100 text-blue-800',
      'Urgent': 'bg-red-100 text-red-800'
    };
    return priorityConfig[priority] || 'bg-gray-100 text-gray-800';
  };

  // Calculate stats based on filtered projects
  const stats = {
    total: filteredProjects.length,
    urgent: filteredProjects.filter(p => p.priority === 'Urgent').length,
    inProgress: filteredProjects.filter(p => p.status === 'In Progress' || p.status === 'On Going').length,
    overdue: filteredProjects.filter(p => p.status === 'Due Date').length
  };

  return (
    <div className="flex min-h-screen bg-white">
      {/* Sidebar */}
      <Sidebar isExpanded={isExpanded} setIsExpanded={setIsExpanded} />
      
      {/* Main Content */}
      <div className={`transition-all duration-300 flex-1 p-8 
          ${isExpanded ? "ml-64" : "ml-20"}`}>
        
        {/* Header */}
        <header className="bg-white border-b border-gray-200 px-6 py-4 h-16">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-semibold text-gray-800">Project Management</h1>
            <div className="flex items-center gap-4">
              <Bell className="w-6 h-6 text-gray-600" />
              <div className="w-8 h-8 bg-custom-blue rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-medium">A</span>
              </div>
            </div>
          </div>
        </header>

        {/* Projects & Operations Section */}
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-semibold text-gray-800">Projects & Operations</h2>
            <button className="bg-custom-blue text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
              Create New Project
            </button>
          </div>

          {/* Stats Cards - Updated with filtered data */}
          <div className="grid grid-cols-4 gap-6 mb-8">
            <div className="group bg-white p-6 rounded-3xl h-40 border border-gray-200 hover:bg-custom-blue hover:shadow-lg">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-lg font-semibold text-gray-800 pt-4 group-hover:text-white">
                  Total Projects
                </h3>
                <Archive className="w-5 h-5 text-custom-blue mt-4 group-hover:text-white" />
              </div>
              <p className="text-3xl font-bold text-gray-900 mt-8 group-hover:text-white">{stats.total}</p>
            </div>

            <div className="group bg-white hover:bg-custom-blue hover:shadow-lg p-6 rounded-3xl border border-gray-200">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-lg font-semibold text-gray-800 pt-4 group-hover:text-white">
                  Urgent Priority Projects
                </h3>
                <AlertTriangle className="w-5 h-5 text-custom-blue mt-4 group-hover:text-white" />
              </div>
              <p className="text-3xl text-gray-900 font-bold mt-8 group-hover:text-white">{stats.urgent}</p>
            </div>

            <div className="group bg-white p-6 rounded-3xl border border-gray-200 hover:bg-custom-blue hover:shadow-lg">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-lg font-semibold text-gray-800 pt-4 group-hover:text-white">
                  In Progress Projects
                </h3>
                <Clock className="w-5 h-5 mt-4 text-custom-blue group-hover:text-white" />
              </div>
              <p className="text-3xl font-bold text-gray-900 mt-8 group-hover:text-white">{stats.inProgress}</p>
            </div>

            <div className="group bg-white p-6 rounded-3xl border border-gray-200 hover:bg-custom-blue hover:shadow-lg">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-lg pt-4 font-semibold text-gray-800 group-hover:text-white">
                  Over Due Projects
                </h3>
                <CheckCircle className="w-5 mt-4 h-5 text-custom-blue group-hover:text-white" />
              </div>
              <p className="text-3xl font-bold text-gray-900 mt-8 group-hover:text-white">{stats.overdue}</p>
            </div>
          </div>

          {/* Search and Filter */}
          <div className="flex items-center gap-4 mb-6">
            <div className="flex-1 relative">
              <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
              <input
                type="text"
                placeholder="Search by Project ID, Title, or Vendor..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-custom-blue"
              />
            </div>
            <button 
              onClick={() => setShowFilters(!showFilters)}
              className={`flex items-center gap-2 px-4 py-2 border rounded-lg transition-colors relative
                ${showFilters ? 'bg-custom-blue text-white border-custom-blue' : 'border-gray-300 hover:bg-gray-50'}
              `}
            >
              <Filter className="w-4 h-4" />
              Filters
              {activeFiltersCount > 0 && (
                <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {activeFiltersCount}
                </span>
              )}
            </button>
            {activeFiltersCount > 0 && (
              <button 
                onClick={clearAllFilters}
                className="flex items-center gap-2 px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
              >
                <X className="w-4 h-4" />
                Clear All
              </button>
            )}
          </div>

          {/* Filter Panel */}
          {showFilters && (
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 mb-6">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">Filters</h3>
              <div className="grid grid-cols-4 gap-4">
                {/* Company Filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Company</label>
                  <select
                    value={filters.company}
                    onChange={(e) => handleFilterChange('company', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-custom-blue"
                  >
                    <option value="">All Companies</option>
                    {getUniqueValues('company').map(company => (
                      <option key={company} value={company}>{company}</option>
                    ))}
                  </select>
                </div>

                {/* Vendor Filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Vendor</label>
                  <select
                    value={filters.vendor}
                    onChange={(e) => handleFilterChange('vendor', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-custom-blue"
                  >
                    <option value="">All Vendors</option>
                    {getUniqueValues('vendor').map(vendor => (
                      <option key={vendor} value={vendor}>{vendor}</option>
                    ))}
                  </select>
                </div>

                {/* Priority Filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                  <select
                    value={filters.priority}
                    onChange={(e) => handleFilterChange('priority', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-custom-blue"
                  >
                    <option value="">All Priorities</option>
                    {getUniqueValues('priority').map(priority => (
                      <option key={priority} value={priority}>{priority}</option>
                    ))}
                  </select>
                </div>

                {/* Status Filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <select
                    value={filters.status}
                    onChange={(e) => handleFilterChange('status', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-custom-blue"
                  >
                    <option value="">All Status</option>
                    {getUniqueValues('status').map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          )}

          {/* Projects Table */}
          <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b border-gray-200">
                  <tr>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">ID</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Title</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Type</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Company</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Vendor</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Priority</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Status</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Timeline</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Cost</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredProjects.length === 0 ? (
                    <tr>
                      <td colSpan="10" className="py-8 px-4 text-center text-gray-500">
                        No projects found matching your filters
                      </td>
                    </tr>
                  ) : (
                    filteredProjects.map((project) => (
                      <tr key={project.id} className="border-b border-gray-100 hover:bg-gray-50">
                        <td className="py-4 px-4 text-sm font-medium text-gray-900">{project.id}</td>
                        <td className="py-4 px-4 text-sm text-gray-900">{project.title}</td>
                        <td className="py-4 px-4 text-sm text-gray-600">{project.type}</td>
                        <td className="py-4 px-4 text-sm text-gray-600">{project.company}</td>
                        <td className="py-4 px-4 text-sm text-gray-600">{project.vendor}</td>
                        <td className="py-4 px-4">
                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getPriorityBadge(project.priority)}`}>
                            {project.priority}
                          </span>
                        </td>
                        <td className="py-4 px-4">
                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusBadge(project.status)}`}>
                            {project.status}
                          </span>
                        </td>
                        <td className="py-4 px-4 text-sm text-gray-600 whitespace-pre-line">{project.timeline}</td>
                        <td className="py-4 px-4 text-sm font-medium text-gray-900">{project.cost}</td>
                        <td className="py-4 px-4">
                          <div className="flex items-center gap-2">
                            <button className="p-1 text-gray-400 hover:text-gray-600">
                              <Eye className="w-4 h-4" />
                            </button>
                            <button className="p-1 text-gray-400 hover:text-gray-600">
                              <Edit className="w-4 h-4" />
                            </button>
                            <button className="p-1 text-gray-400 hover:text-red-600">
                              <Trash2 className="w-4 h-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>

          {/* Results Summary */}
          {filteredProjects.length > 0 && (
            <div className="mt-4 text-sm text-gray-600">
              Showing {filteredProjects.length} of {projects.length} projects
              {activeFiltersCount > 0 && ` (${activeFiltersCount} filter${activeFiltersCount > 1 ? 's' : ''} applied)`}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}